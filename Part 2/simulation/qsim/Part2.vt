// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2023 09:00:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_sample_tst(
	A,
	B,
	clk,
	data_in,
	FSMReset,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clk;
input  data_in;
input  FSMReset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clk or data_in or FSMReset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block1_vlg_check_tst (
	OP,
	R1,
	R2,
	Sign,
	StudentId,
	sampler_rx
);
input [15:0] OP;
input [0:6] R1;
input [0:6] R2;
input [0:6] Sign;
input [0:6] StudentId;
input sampler_rx;

reg [15:0] OP_expected;
reg [0:6] R1_expected;
reg [0:6] R2_expected;
reg [0:6] Sign_expected;
reg [0:6] StudentId_expected;

reg [15:0] OP_prev;
reg [0:6] R1_prev;
reg [0:6] R2_prev;
reg [0:6] Sign_prev;
reg [0:6] StudentId_prev;

reg [15:0] OP_expected_prev;
reg [0:6] R1_expected_prev;
reg [0:6] R2_expected_prev;
reg [0:6] Sign_expected_prev;
reg [0:6] StudentId_expected_prev;

reg [15:0] last_OP_exp;
reg [0:6] last_R1_exp;
reg [0:6] last_R2_exp;
reg [0:6] last_Sign_exp;
reg [0:6] last_StudentId_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	OP_prev = OP;
	R1_prev = R1;
	R2_prev = R2;
	Sign_prev = Sign;
	StudentId_prev = StudentId;
end

// update expected /o prevs

always @(trigger)
begin
	OP_expected_prev = OP_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	Sign_expected_prev = Sign_expected;
	StudentId_expected_prev = StudentId_expected;
end


// expected OP[ 15 ]
initial
begin
	OP_expected[15] = 1'bX;
end 
// expected OP[ 14 ]
initial
begin
	OP_expected[14] = 1'bX;
end 
// expected OP[ 13 ]
initial
begin
	OP_expected[13] = 1'bX;
end 
// expected OP[ 12 ]
initial
begin
	OP_expected[12] = 1'bX;
end 
// expected OP[ 11 ]
initial
begin
	OP_expected[11] = 1'bX;
end 
// expected OP[ 10 ]
initial
begin
	OP_expected[10] = 1'bX;
end 
// expected OP[ 9 ]
initial
begin
	OP_expected[9] = 1'bX;
end 
// expected OP[ 8 ]
initial
begin
	OP_expected[8] = 1'bX;
end 
// expected OP[ 7 ]
initial
begin
	OP_expected[7] = 1'bX;
end 
// expected OP[ 6 ]
initial
begin
	OP_expected[6] = 1'bX;
end 
// expected OP[ 5 ]
initial
begin
	OP_expected[5] = 1'bX;
end 
// expected OP[ 4 ]
initial
begin
	OP_expected[4] = 1'bX;
end 
// expected OP[ 3 ]
initial
begin
	OP_expected[3] = 1'bX;
end 
// expected OP[ 2 ]
initial
begin
	OP_expected[2] = 1'bX;
end 
// expected OP[ 1 ]
initial
begin
	OP_expected[1] = 1'bX;
end 
// expected OP[ 0 ]
initial
begin
	OP_expected[0] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected Sign[ 6 ]
initial
begin
	Sign_expected[6] = 1'bX;
end 
// expected Sign[ 5 ]
initial
begin
	Sign_expected[5] = 1'bX;
end 
// expected Sign[ 4 ]
initial
begin
	Sign_expected[4] = 1'bX;
end 
// expected Sign[ 3 ]
initial
begin
	Sign_expected[3] = 1'bX;
end 
// expected Sign[ 2 ]
initial
begin
	Sign_expected[2] = 1'bX;
end 
// expected Sign[ 1 ]
initial
begin
	Sign_expected[1] = 1'bX;
end 
// expected Sign[ 0 ]
initial
begin
	Sign_expected[0] = 1'bX;
end 
// expected StudentId[ 6 ]
initial
begin
	StudentId_expected[6] = 1'bX;
end 
// expected StudentId[ 5 ]
initial
begin
	StudentId_expected[5] = 1'bX;
end 
// expected StudentId[ 4 ]
initial
begin
	StudentId_expected[4] = 1'bX;
end 
// expected StudentId[ 3 ]
initial
begin
	StudentId_expected[3] = 1'bX;
end 
// expected StudentId[ 2 ]
initial
begin
	StudentId_expected[2] = 1'bX;
end 
// expected StudentId[ 1 ]
initial
begin
	StudentId_expected[1] = 1'bX;
end 
// expected StudentId[ 0 ]
initial
begin
	StudentId_expected[0] = 1'bX;
end 
// generate trigger
always @(OP_expected or OP or R1_expected or R1 or R2_expected or R2 or Sign_expected or Sign or StudentId_expected or StudentId)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OP = %b | expected R1 = %b | expected R2 = %b | expected Sign = %b | expected StudentId = %b | ",OP_expected_prev,R1_expected_prev,R2_expected_prev,Sign_expected_prev,StudentId_expected_prev);
	$display("| real OP = %b | real R1 = %b | real R2 = %b | real Sign = %b | real StudentId = %b | ",OP_prev,R1_prev,R2_prev,Sign_prev,StudentId_prev);
`endif
	if (
		( OP_expected_prev[0] !== 1'bx ) && ( OP_prev[0] !== OP_expected_prev[0] )
		&& ((OP_expected_prev[0] !== last_OP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[0] = OP_expected_prev[0];
	end
	if (
		( OP_expected_prev[1] !== 1'bx ) && ( OP_prev[1] !== OP_expected_prev[1] )
		&& ((OP_expected_prev[1] !== last_OP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[1] = OP_expected_prev[1];
	end
	if (
		( OP_expected_prev[2] !== 1'bx ) && ( OP_prev[2] !== OP_expected_prev[2] )
		&& ((OP_expected_prev[2] !== last_OP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[2] = OP_expected_prev[2];
	end
	if (
		( OP_expected_prev[3] !== 1'bx ) && ( OP_prev[3] !== OP_expected_prev[3] )
		&& ((OP_expected_prev[3] !== last_OP_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[3] = OP_expected_prev[3];
	end
	if (
		( OP_expected_prev[4] !== 1'bx ) && ( OP_prev[4] !== OP_expected_prev[4] )
		&& ((OP_expected_prev[4] !== last_OP_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[4] = OP_expected_prev[4];
	end
	if (
		( OP_expected_prev[5] !== 1'bx ) && ( OP_prev[5] !== OP_expected_prev[5] )
		&& ((OP_expected_prev[5] !== last_OP_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[5] = OP_expected_prev[5];
	end
	if (
		( OP_expected_prev[6] !== 1'bx ) && ( OP_prev[6] !== OP_expected_prev[6] )
		&& ((OP_expected_prev[6] !== last_OP_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[6] = OP_expected_prev[6];
	end
	if (
		( OP_expected_prev[7] !== 1'bx ) && ( OP_prev[7] !== OP_expected_prev[7] )
		&& ((OP_expected_prev[7] !== last_OP_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[7] = OP_expected_prev[7];
	end
	if (
		( OP_expected_prev[8] !== 1'bx ) && ( OP_prev[8] !== OP_expected_prev[8] )
		&& ((OP_expected_prev[8] !== last_OP_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[8] = OP_expected_prev[8];
	end
	if (
		( OP_expected_prev[9] !== 1'bx ) && ( OP_prev[9] !== OP_expected_prev[9] )
		&& ((OP_expected_prev[9] !== last_OP_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[9] = OP_expected_prev[9];
	end
	if (
		( OP_expected_prev[10] !== 1'bx ) && ( OP_prev[10] !== OP_expected_prev[10] )
		&& ((OP_expected_prev[10] !== last_OP_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[10] = OP_expected_prev[10];
	end
	if (
		( OP_expected_prev[11] !== 1'bx ) && ( OP_prev[11] !== OP_expected_prev[11] )
		&& ((OP_expected_prev[11] !== last_OP_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[11] = OP_expected_prev[11];
	end
	if (
		( OP_expected_prev[12] !== 1'bx ) && ( OP_prev[12] !== OP_expected_prev[12] )
		&& ((OP_expected_prev[12] !== last_OP_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[12] = OP_expected_prev[12];
	end
	if (
		( OP_expected_prev[13] !== 1'bx ) && ( OP_prev[13] !== OP_expected_prev[13] )
		&& ((OP_expected_prev[13] !== last_OP_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[13] = OP_expected_prev[13];
	end
	if (
		( OP_expected_prev[14] !== 1'bx ) && ( OP_prev[14] !== OP_expected_prev[14] )
		&& ((OP_expected_prev[14] !== last_OP_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[14] = OP_expected_prev[14];
	end
	if (
		( OP_expected_prev[15] !== 1'bx ) && ( OP_prev[15] !== OP_expected_prev[15] )
		&& ((OP_expected_prev[15] !== last_OP_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP_exp[15] = OP_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( Sign_expected_prev[0] !== 1'bx ) && ( Sign_prev[0] !== Sign_expected_prev[0] )
		&& ((Sign_expected_prev[0] !== last_Sign_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[0] = Sign_expected_prev[0];
	end
	if (
		( Sign_expected_prev[1] !== 1'bx ) && ( Sign_prev[1] !== Sign_expected_prev[1] )
		&& ((Sign_expected_prev[1] !== last_Sign_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[1] = Sign_expected_prev[1];
	end
	if (
		( Sign_expected_prev[2] !== 1'bx ) && ( Sign_prev[2] !== Sign_expected_prev[2] )
		&& ((Sign_expected_prev[2] !== last_Sign_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[2] = Sign_expected_prev[2];
	end
	if (
		( Sign_expected_prev[3] !== 1'bx ) && ( Sign_prev[3] !== Sign_expected_prev[3] )
		&& ((Sign_expected_prev[3] !== last_Sign_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[3] = Sign_expected_prev[3];
	end
	if (
		( Sign_expected_prev[4] !== 1'bx ) && ( Sign_prev[4] !== Sign_expected_prev[4] )
		&& ((Sign_expected_prev[4] !== last_Sign_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[4] = Sign_expected_prev[4];
	end
	if (
		( Sign_expected_prev[5] !== 1'bx ) && ( Sign_prev[5] !== Sign_expected_prev[5] )
		&& ((Sign_expected_prev[5] !== last_Sign_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[5] = Sign_expected_prev[5];
	end
	if (
		( Sign_expected_prev[6] !== 1'bx ) && ( Sign_prev[6] !== Sign_expected_prev[6] )
		&& ((Sign_expected_prev[6] !== last_Sign_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Sign_exp[6] = Sign_expected_prev[6];
	end
	if (
		( StudentId_expected_prev[0] !== 1'bx ) && ( StudentId_prev[0] !== StudentId_expected_prev[0] )
		&& ((StudentId_expected_prev[0] !== last_StudentId_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[0] = StudentId_expected_prev[0];
	end
	if (
		( StudentId_expected_prev[1] !== 1'bx ) && ( StudentId_prev[1] !== StudentId_expected_prev[1] )
		&& ((StudentId_expected_prev[1] !== last_StudentId_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[1] = StudentId_expected_prev[1];
	end
	if (
		( StudentId_expected_prev[2] !== 1'bx ) && ( StudentId_prev[2] !== StudentId_expected_prev[2] )
		&& ((StudentId_expected_prev[2] !== last_StudentId_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[2] = StudentId_expected_prev[2];
	end
	if (
		( StudentId_expected_prev[3] !== 1'bx ) && ( StudentId_prev[3] !== StudentId_expected_prev[3] )
		&& ((StudentId_expected_prev[3] !== last_StudentId_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[3] = StudentId_expected_prev[3];
	end
	if (
		( StudentId_expected_prev[4] !== 1'bx ) && ( StudentId_prev[4] !== StudentId_expected_prev[4] )
		&& ((StudentId_expected_prev[4] !== last_StudentId_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[4] = StudentId_expected_prev[4];
	end
	if (
		( StudentId_expected_prev[5] !== 1'bx ) && ( StudentId_prev[5] !== StudentId_expected_prev[5] )
		&& ((StudentId_expected_prev[5] !== last_StudentId_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[5] = StudentId_expected_prev[5];
	end
	if (
		( StudentId_expected_prev[6] !== 1'bx ) && ( StudentId_prev[6] !== StudentId_expected_prev[6] )
		&& ((StudentId_expected_prev[6] !== last_StudentId_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentId[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentId_expected_prev);
		$display ("     Real value = %b", StudentId_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_StudentId_exp[6] = StudentId_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#360000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clk;
reg data_in;
reg FSMReset;
// wires                                               
wire [15:0] OP;
wire [0:6] R1;
wire [0:6] R2;
wire [0:6] Sign;
wire [0:6] StudentId;

wire sampler;                             

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clk(clk),
	.data_in(data_in),
	.FSMReset(FSMReset),
	.OP(OP),
	.R1(R1),
	.R2(R2),
	.Sign(Sign),
	.StudentId(StudentId)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

Block1_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clk(clk),
	.data_in(data_in),
	.FSMReset(FSMReset),
	.sampler_tx(sampler)
);

Block1_vlg_check_tst tb_out(
	.OP(OP),
	.R1(R1),
	.R2(R2),
	.Sign(Sign),
	.StudentId(StudentId),
	.sampler_rx(sampler)
);
endmodule

